{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/igitonga/Development/graphql-nodejs-react/src/pages/_document.tsx"],"sourcesContent":["import { Html, Head, Main, NextScript } from \"next/document\";\n\nexport default function Document() {\n  return (\n    <Html lang=\"en\">\n      <Head />\n      <body className=\"antialiased\">\n        <Main />\n        <NextScript />\n      </body>\n    </Html>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,qKAAC,yHAAA,CAAA,OAAI;QAAC,MAAK;;0BACT,qKAAC,yHAAA,CAAA,OAAI;;;;;0BACL,qKAAC;gBAAK,WAAU;;kCACd,qKAAC,yHAAA,CAAA,OAAI;;;;;kCACL,qKAAC,yHAAA,CAAA,aAAU;;;;;;;;;;;;;;;;;AAInB"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///Users/igitonga/Development/graphql-nodejs-react/src/lib/apolloClient.ts"],"sourcesContent":["import { ApolloClient, InMemoryCache, HttpLink } from \"@apollo/client\";\n\nconst httpLink = new HttpLink({\n    uri: 'http://localhost:3000/graphql',\n    credentials: 'same-origin',\n});\n\nconst apolloClient = new ApolloClient({\n    uri: \"https://countries.trevorblades.com\",  \n    cache: new InMemoryCache()\n});\n\nexport default apolloClient;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,WAAW,IAAI,6HAAA,CAAA,WAAQ,CAAC;IAC1B,KAAK;IACL,aAAa;AACjB;AAEA,MAAM,eAAe,IAAI,6HAAA,CAAA,eAAY,CAAC;IAClC,KAAK;IACL,OAAO,IAAI,6HAAA,CAAA,gBAAa;AAC5B;uCAEe"}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 131, "column": 0}, "map": {"version":3,"sources":["file:///Users/igitonga/Development/graphql-nodejs-react/src/lib/apolloProvider.tsx"],"sourcesContent":["import { FC, ReactNode } from \"react\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport client from \"./apolloClient\";\n\ninterface ApolloProviderWrapperProps {\n    children: ReactNode;\n}\n\nconst ApolloProviderWrapper: FC<ApolloProviderWrapperProps> = ({ children }) => {\n    return(\n        <ApolloProvider client={client}>\n            {children}\n        </ApolloProvider>\n    )\n}\n\nexport default ApolloProviderWrapper;"],"names":[],"mappings":";;;;AACA;AACA;;;;AAMA,MAAM,wBAAwD,CAAC,EAAE,QAAQ,EAAE;IACvE,qBACI,qKAAC,6HAAA,CAAA,iBAAc;QAAC,QAAQ,mHAAA,CAAA,UAAM;kBACzB;;;;;;AAGb;uCAEe"}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":["file:///Users/igitonga/Development/graphql-nodejs-react/src/pages/_app.tsx"],"sourcesContent":["import \"@/styles/globals.css\";\nimport type { AppProps } from \"next/app\";\nimport ApolloProviderWrapper from \"@/lib/apolloProvider\";\n\nexport default function App({ Component, pageProps }: AppProps) {\n  return (\n    <ApolloProviderWrapper>\n      <Component {...pageProps} />\n    </ApolloProviderWrapper>\n  );\n}\n"],"names":[],"mappings":";;;;AAEA;;;;AAEe,SAAS,IAAI,EAAE,SAAS,EAAE,SAAS,EAAY;IAC5D,qBACE,qKAAC,sHAAA,CAAA,UAAqB;kBACpB,cAAA,qKAAC;YAAW,GAAG,SAAS;;;;;;;;;;;AAG9B"}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///Users/igitonga/Development/graphql-nodejs-react/src/pages/index.tsx"],"sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\nimport apolloClient from \"@/lib/apolloClient\";\n\ninterface Country {\n  code: string;\n  name: string;\n}\ninterface CountryDataType {\n  countries: Country[];\n}\n\nconst GET_COUNTRIES = gql`\nquery Countries {\n  countries {\n    code\n    name\n  }\n}\n`\n\nexport default function Home() {\n  const {data, loading, error} = useQuery<CountryDataType>(GET_COUNTRIES);\n\n  if(loading)\n    return <p>loading..</p>\n  if(error)\n    return <p>{error.message}</p>  \n\n  if(data){\n    return (\n      <div>\n        {data.countries.map(country => <p>{country.name}</p>)}\n      </div>\n    );\n  }\n\n}\n\n"],"names":[],"mappings":";;;;AAAA;;;AAWA,MAAM,gBAAgB,6HAAA,CAAA,MAAG,CAAC;;;;;;;AAO1B,CAAC;AAEc,SAAS;IACtB,MAAM,EAAC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAC,GAAG,CAAA,GAAA,6HAAA,CAAA,WAAQ,AAAD,EAAmB;IAEzD,IAAG,SACD,qBAAO,qKAAC;kBAAE;;;;;;IACZ,IAAG,OACD,qBAAO,qKAAC;kBAAG,MAAM,OAAO;;;;;;IAE1B,IAAG,MAAK;QACN,qBACE,qKAAC;sBACE,KAAK,SAAS,CAAC,GAAG,CAAC,CAAA,wBAAW,qKAAC;8BAAG,QAAQ,IAAI;;;;;;;;;;;IAGrD;AAEF"}},
    {"offset": {"line": 233, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}